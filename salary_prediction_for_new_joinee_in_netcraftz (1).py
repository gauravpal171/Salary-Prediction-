# -*- coding: utf-8 -*-
"""Salary Prediction For New Joinee in Netcraftz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cVvpl14MjIdOgi0A2QUJfCVdZ9HHMo3F

#Installing Gradio for Interface Deployment
"""

!pip install gradio --quiet

"""#Library Imports for Machine Learning Pipeline with Gradio Interface"""

# Import libraries
import pandas as pd
import numpy as np
import gradio as gr
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor

"""# Load the dataset"""

df = pd.read_csv('/content/sample_data/SALARY DATA.csv')
df.dropna(inplace=True)

"""#Displaying the Salary DataFrame"""

df

"""#Identifying Null Values in the Dataset"""

df.isnull().sum()

"""# Features and target"""

X = df.drop('Salary', axis=1)
y = df['Salary']

"""#Categorical and numerical features"""

categorical_cols = ['Gender', 'Education Level', 'Job Title']
numerical_cols = ['Age', 'Years of Experience']

"""#Preprocessing and model pipeline"""

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ],
    remainder='passthrough'
)

model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

"""#Train model"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model_pipeline.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, model_pipeline.predict(X_test))
r2 = r2_score(y_test, model_pipeline.predict(X_test))

"""#as r2 value is 87% which model is performing good we can use this model for deployment purpose"""

print("Model Evaluation Parameters:")
print(f"Mean Absolute Error (MAE): {mse:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (RÂ²): {r2:.2f}")

"""# Define prediction function"""

def predict_salary(age, gender, education, job_title, experience):
    input_df = pd.DataFrame([{
        'Age': age,
        'Gender': gender,
        'Education Level': education,
        'Job Title': job_title,
        'Years of Experience': experience
    }])
    prediction = model_pipeline.predict(input_df)[0]
    return f"Predicted Salary: Rs{prediction:,.2f}"

"""# Get unique values for dropdowns"""

genders = df['Gender'].unique().tolist()
educations = df['Education Level'].unique().tolist()
job_titles = df['Job Title'].unique().tolist()

"""# Create Gradio UI"""

with gr.Blocks() as demo:
    gr.Markdown("## ðŸ’¼ Salary Prediction For New Joinee in Netcraftz")

    with gr.Row():
        age = gr.Slider(18, 65, label="Age")
        experience = gr.Slider(0, 40, label="Years of Experience")

    gender = gr.Dropdown(choices=genders, label="Gender")
    education = gr.Dropdown(choices=educations, label="Education Level")
    job_title = gr.Dropdown(choices=job_titles, label="Job Title")

    predict_button = gr.Button("Predict Salary")
    output = gr.Textbox(label="Result")

    predict_button.click(fn=predict_salary, inputs=[age, gender, education, job_title, experience], outputs=output)

"""# Launch app"""

# Launch app
demo.launch()